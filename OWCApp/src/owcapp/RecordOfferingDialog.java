/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package owcapp;

import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.math.BigDecimal;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.PLAIN_MESSAGE;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import org.oxbow.swingbits.table.filter.TableRowFilterSupport;
import static owcapp.OWCApp.ValidateDate;
/**
 *
 * @author Zachary
 */
public class RecordOfferingDialog extends javax.swing.JFrame {

    /** Creates new form RecordOfferingDialog */
    public RecordOfferingDialog() {
        initComponents();
        typePayment.addItem("Cash");
        typePayment.addItem("Check");
        paymentNumber.setVisible(false);
       
        model = (DefaultTableModel)offerings.getModel();
        accountModel = (DefaultTableModel)accountTotals.getModel();
        cashCoinCheckModel = (DefaultTableModel)cashCoinCheckTable.getModel();
        ApplicationOptions opts = ApplicationOptions.getInstance();
        Vector<String> categories = opts.GetCategories();
        Vector<Auxiliary> departments = opts.GetAuxiliaries();
        for(int i = 0; i < categories.size(); i++)
        {
            category.addItem(categories.get(i));
        }
        category.setSelectedItem("Offering");
        for(int i = 0; i < departments.size(); i++)
        {
            department.addItem(departments.get(i).name);
            Object[] rowData = new Object[2];
            rowData[0] = departments.get(i).name;
            rowData[1] = 0.0;
            accountModel.addRow(rowData);
        }
        department.setSelectedItem("General");
        Object[] rowData = new Object[2];
        rowData[0] = "Total";
        rowData[1] = 0.0;
        accountModel.addRow(rowData);
        
        Object[] rowData1 = new Object[3];
        rowData1[0] = 0.0;
        rowData1[1] = 0.0;
        rowData1[2] = 0.0;
        cashCoinCheckModel.addRow(rowData1);
        
        listOfOfferings = new ArrayList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        paymentNumberLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        offerings = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        accountTotals = new javax.swing.JTable();
        depositId = new javax.swing.JTextField();
        paymentNumber = new javax.swing.JTextField();
        typePayment = new javax.swing.JComboBox<>();
        department = new javax.swing.JComboBox<>();
        category = new javax.swing.JComboBox<>();
        comment = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jlabel10 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        offeringDate = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        cashCoinCheckTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        documentLink = new javax.swing.JTextField();
        browseDocuments = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Offering Recording");

        jLabel2.setText("Date [YYYY-MM-DD]");

        jLabel3.setText("Deposit Bag ID");

        jLabel4.setText("Type of Payment");

        paymentNumberLabel.setText("Payment Number");

        jLabel6.setText("Department");

        jLabel7.setText("Category");

        jLabel8.setText("Comments");

        offerings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type of Payment", "Payment Number", "Amount", "Department", "Category", "Comments"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(offerings);

        accountTotals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Account", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(accountTotals);

        typePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typePaymentActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jlabel10.setText("Name");

        jLabel9.setText("Offerings");

        jLabel10.setText("Total Breakdown");

        jLabel11.setText("Amount");

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");

        cashCoinCheckTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cash/Coin", "Check", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(cashCoinCheckTable);

        jLabel5.setText("Cash/Check Breakdown");

        jLabel12.setText("Document Link");

        browseDocuments.setText("...");
        browseDocuments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDocumentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(65, 65, 65))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addGap(18, 18, 18)
                .addComponent(exitButton)
                .addGap(53, 53, 53))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(offeringDate, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jlabel10))
                                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(typePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paymentNumberLabel)
                                    .addComponent(paymentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel8)
                            .addComponent(comment, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel12)))
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(department, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(41, 41, 41)
                                .addComponent(addButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(documentLink, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseDocuments))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(depositId, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel9)
                        .addGap(575, 575, 575)
                        .addComponent(jLabel10)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depositId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offeringDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(paymentNumberLabel)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typePayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jlabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(department, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(documentLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseDocuments))))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(removeButton)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(exitButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddEntry();
    }//GEN-LAST:event_addButtonActionPerformed

    private void typePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typePaymentActionPerformed
        if("Check" == (String)typePayment.getSelectedItem())
        {
            paymentNumber.setVisible(true);
            paymentNumberLabel.setVisible(true);
        }
        
        else
        {
            paymentNumber.setVisible(false);
            paymentNumberLabel.setVisible(false);
        }
    }//GEN-LAST:event_typePaymentActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        RemoveEntry();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        // Confirm that the user 
        JOptionPane.showConfirmDialog(null, "Are you sure you want enter this data?","Data Confirmation", YES_NO_OPTION);
        
        // Put offerings into array list
        for(int i = 0; i<model.getRowCount();i++)
        {
            String _name = (String)model.getValueAt(i, 0);
            String _paymentType = (String)model.getValueAt(i, 1);
            String _paymentNumber = (String)model.getValueAt(i, 2);
            double _amount = (Double)model.getValueAt(i,3);
            String _department = (String)model.getValueAt(i, 4);
            String _category = (String)model.getValueAt(i,5);
            String _comment = (String)model.getValueAt(i,6);
            String _date = offeringDate.getText();
            String _depositId = depositId.getText();
            boolean _isReconciled = false;
            int _monthReconciled = 0;
            int _transactionId = 0;
            Offering offering = new Offering(_name, _paymentType, _paymentNumber, _amount, _department, _category, _comment, _date, _depositId,
            _isReconciled, _monthReconciled, _transactionId);
            listOfOfferings.add(offering);
        }        
        
        Broker b = Broker.getInstance();
        double total = 0;
        // Record offerings
        for(Offering o: listOfOfferings)
        {
            Status status = b.AddOffering(o);
            total += o.amount;
            if(!status.isSuccess)
            {
                JOptionPane.showMessageDialog(null, status.msg, "Database Query Error", ERROR_MESSAGE);
                return;
            }
            
        }
        
        // Record deposit in checking ledger
        String descriptionOfTransaction = "Church Deposit #" + depositId.getText();
        Transaction t = new Transaction(0, offeringDate.getText(), descriptionOfTransaction, total, "",
            "multi", "multi", "", "", 0, false, false);
        Status status = b.AddTransaction(t, "checking");
        if(!status.isSuccess)
        {
            JOptionPane.showMessageDialog(null, status.msg, "Database Query Error", ERROR_MESSAGE);
            return;
        }
        
        JOptionPane.showMessageDialog(null, "Data Logged Successfully", "Data Logged Successfully", PLAIN_MESSAGE);
        ClearAllData();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void browseDocumentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDocumentsActionPerformed
        documentLink.setText(OWCApp.GetFileName(this));
    }//GEN-LAST:event_browseDocumentsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecordOfferingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecordOfferingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecordOfferingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecordOfferingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecordOfferingDialog().setVisible(true);
            }
        });
    }

    private void ClearData()
    {
        name.setText("");
        paymentNumber.setText("");
        comment.setText("");
        amount.setText("");
    }
    
    private void ClearAllData()
    {
        ClearData();
        
        // Clear date and deposit id
        depositId.setText("");
        offeringDate.setText("");
        documentLink.setText("");
        
        // Clear offering table
        model.setRowCount(0);
        offerings.revalidate();
        
        // Clear auxialiary table
        ApplicationOptions opts = ApplicationOptions.getInstance();
        Vector<Auxiliary> departments = opts.GetAuxiliaries();        
        for(int i = 0; i < departments.size(); i++)
        {
            accountModel.setValueAt("0.0", i,1);
       
        }
       
        cashCoinCheckModel.setValueAt("0.0", 0,0);
        cashCoinCheckModel.setValueAt("0.0", 0,1);
        cashCoinCheckModel.setValueAt("0.0", 0,2);
    }
    
    private void AddEntry()
    {
        boolean isDataValid = IsEntryValid();
        if(isDataValid)
        {
            BigDecimal precisionAmount =  new BigDecimal(amount.getText());
            Object[] rowData = new Object[7];
            rowData[0] = name.getText();
            rowData[1] = typePayment.getSelectedItem().toString();
            rowData[2] = paymentNumber.getText();
            rowData[3] = precisionAmount.doubleValue();
            rowData[4] = department.getSelectedItem().toString();
            rowData[5] = category.getSelectedItem().toString();
            rowData[6] = comment.getText();
            model.addRow(rowData);
            
           UpdateAccountsTable(department.getSelectedItem().toString(), precisionAmount.doubleValue());
           boolean isCash = paymentNumber.getText().isEmpty();
           UpdateCashCoinCheckTable(isCash, precisionAmount.doubleValue());
           ClearData();                                                                                                                                 
        }
    }
    
   private void UpdateCashCoinCheckTable(boolean isCash, Double amountToIncrement)
   {
       double cashCoin = (double) cashCoinCheckModel.getValueAt(0, 0);
       double check = (double) cashCoinCheckModel.getValueAt(0, 1);
       
       if(isCash)
       {
           cashCoin += amountToIncrement;
       }
       
       else
       {
           check += amountToIncrement;
       }
       double total = cashCoin + check;
       cashCoinCheckModel.setValueAt(cashCoin, 0, 0);
       cashCoinCheckModel.setValueAt(check, 0, 1);
       cashCoinCheckModel.setValueAt(total, 0, 2);
   }
    private void UpdateAccountsTable(String auxName, Double amountToIncrement)
    {
        ApplicationOptions opts = ApplicationOptions.getInstance();
        int indexOfDepartment = opts.GetAuxiliaryIndex(auxName);
        int indexOfTotal = department.getItemCount();
        int amountsColumn = 1;
        double deptTotal= (double) accountModel.getValueAt(indexOfDepartment, amountsColumn);
        double subTotal = (double) accountModel.getValueAt(indexOfTotal, amountsColumn);
        deptTotal += amountToIncrement;
        subTotal += amountToIncrement;

        accountModel.setValueAt(deptTotal, indexOfDepartment, amountsColumn);
        accountModel.setValueAt(subTotal, indexOfTotal, amountsColumn);
    }
    
    private void RemoveEntry()
    {
        int row = offerings.getSelectedRow();
        if(row < 0)
        {
            return;
        }
        
        int colOfPaymentNumber = 2;
        int colOfAuxName = 4;
        int colOfAmount =3;
        String auxName = (String)model.getValueAt(row, colOfAuxName );
        String paymentNumber = (String)(model.getValueAt(row, colOfPaymentNumber));
        Double amountToIncrement =(Double)model.getValueAt(row, colOfAmount) *-1;
        UpdateAccountsTable(auxName, amountToIncrement);
        boolean isCash = paymentNumber.isEmpty();
        UpdateCashCoinCheckTable(isCash, amountToIncrement);
        model.removeRow(row);        
    }
    
    private boolean IsEntryValid()
    {
        String msg= new String();
        boolean isValid = true;
        try
        {
            
           boolean isDateValid = ValidateDate(offeringDate.getText());
            if(!isDateValid)
            {
                msg += "Date format is invalid.\r\n";
            }
            
            if(depositId.getText().isEmpty())
            {
                msg += "Deposit ID is empty.\r\n";
            }
            
            if(amount.getText().isEmpty())
            {
                msg += "Amount field is empty.\r\n";
            }
            
            double amountNumber = Double.valueOf(amount.getText());
            boolean isNearestHundredth = (BigDecimal.valueOf(amountNumber).scale() <= 2);
            if(amountNumber <=0)
            {
                msg += "Amount is not greater than 0.\r\n";
            }

            if(!isNearestHundredth)
            {
                msg += "Amount cannot be more than 2 decimals.\r\n";
            }
        
        
        }
        
        catch (NumberFormatException nfe) 
        {  
            JOptionPane.showMessageDialog(null, "Amount isn't numeric", "Invalid Entry", ERROR_MESSAGE);
            isValid = false;
            return isValid;  
        }
        
        if(name.getText().isEmpty())
        {
           msg += "Name field is empty\r\n.";
        }
        
        if((String)typePayment.getSelectedItem() == "Check" && paymentNumber.getText().isEmpty())
        {
            msg += "Payment number field is empty.\r\n";
        }   
  
 
        if(msg.isEmpty())
        {
            isValid = true;
        }
        
        else
        {
            JOptionPane.showMessageDialog(null, msg, "Invalid Entry", ERROR_MESSAGE);
            isValid = false;
        }
        return isValid;
        
    }
    
   private DefaultTableModel model;
   private DefaultTableModel accountModel;
   private DefaultTableModel cashCoinCheckModel;
   private ArrayList<Offering>listOfOfferings;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountTotals;
    private javax.swing.JButton addButton;
    private javax.swing.JTextField amount;
    private javax.swing.JButton browseDocuments;
    private javax.swing.JTable cashCoinCheckTable;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JTextField comment;
    private javax.swing.JComboBox<String> department;
    private javax.swing.JTextField depositId;
    private javax.swing.JTextField documentLink;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jlabel10;
    private javax.swing.JTextField name;
    private javax.swing.JTextField offeringDate;
    private javax.swing.JTable offerings;
    private javax.swing.JTextField paymentNumber;
    private javax.swing.JLabel paymentNumberLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox<String> typePayment;
    // End of variables declaration//GEN-END:variables

}

